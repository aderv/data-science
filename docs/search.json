[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ciencia de Datos",
    "section": "",
    "text": "Presentación",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#descripción-del-curso",
    "href": "index.html#descripción-del-curso",
    "title": "Ciencia de Datos",
    "section": "Descripción del curso",
    "text": "Descripción del curso\nEl curso de ciencia de datos presenta una introducción a la teoría e implementación de métodos estadísticos para el análisis de datos. Se hace énfasis en los modelos predictivos que buscan aproximar una variable de interés \\(Y\\) (métodos supervisados) en términos de un conjunto de variables predictoras \\((\\textbf{X})\\), usando una función f que debe ser aprendida a través de un conjunto de datos \\((x_i, y_i)\\ i=1,2,...,n\\).\n\n\n\n\n\n\n\nFigura 1: Habilidades necesarias para ciencia de datos\n\n\n\n\nSe estudian las bases conceptuales y matemáticas de los modelos y se evalúan a partir de sus propiedades estadísticas y capacidad de predecir la variable \\(Y\\). Se estudia también la parte práctica de los temas mediante la aplicación y validación de los métodos en bases de datos sintéticas y reales, usando el lenguaje R como software estadístico y de programación.\nLa ciencia de datos requiere de disciplinas y habilidades diversas, pero puede resumirse en 3 grandes aspectos (Figura 1):\n\nConocimiento en estadística y modelos matemáticos\nManejo de algoritmos y lenguajes de programación\nExperticia en algún campo específico de aplicación\n\nEl objetivo principal de este curso es desarrollar de manera formal, pero sin exceso en la teoría matemática, los modelos estadísticos en ciencia de datos. Las habilidades de programación y conocimientos básicos en los campos de aplicación se desarrollarán en la medida de lo necesario.\nResolver problemas de ciencia de datos no es un proceso lineal, pero sí se puede enmarcar en una serie de etapas que ayudan a desarrollar de manera consistente el trabajo o flujo de trabajo.\nEn la Figura 2 se muestra un esquema de este proceso sistemático. La primera etapa se conoce como disputa de datos (data wrangling)1 y consiste en la obtención y puesta a punto de los datos que se van a utilizar. Esta fase requiere importar, ordenar y transformar los datos, y necesita habilidades específicas en manejo de bases de datos. Las personas con alta especialización en esta área se conocen somo Ingenieros de Datos (Data Engineers).\n1 Algunos autores lo definen como una pelea con los datos\n\n\n\n\n\n\n\nflowchart LR\nsubgraph DW[Data Wrangling]\n  direction LR\n  A(Importar) --&gt; B(Ordenar)\n  B --&gt; C(Transformar)\nend\nsubgraph EDA[\"Exploratory Data Analysis (EDA)\"]\n  direction RL\n  C2(Transformar) --&gt; D(Visualizar)\n  D --&gt; C2\nend\nsubgraph MO[Modeling]\n  direction RL\n  E(Modelar) --&gt; F(Evaluar)\n  F --&gt; E\nend\nsubgraph CO[Communicate]\n  G(comunicar)\nend\n\nDW --&gt; EDA\nEDA --&gt; MO\nMO --&gt; EDA\nMO --&gt; CO\n\n\n\n\n\n\n\n\nFigura 2: Flujo de trabajo en ciencia de datos\n\n\n\nLa segunda fase es el análisis exploratorio de datos (Exploratory Data Analysis (EDA)) y consiste principalmente en la visualización a través de tablas, resúmenes y gráficas de la información que se tiene en las bases de datos que han sido previamente organizadas. Esta fase puede requerir iterar entre los procesos de transformación y visualización. No todos los problemas de ciencia de datos requieren de técnicas de machine learning y muchos de estos problemas pueden resolverse en esta fase. Las personas que se especializan en esta área se conocen como Analistas de Datos (Data Analysts).\nLa tercera fase (y la que más desarrollaremos en este curso) es la Modelación y se trata de aplicar modelos estadísticos y de machine learning para obtener ideas e información a partir de los datos. Este proceso también es iterativo y puede requerir aplicar varios tipos de modelos, evaluarlos y compararlos para obtener buenos resultados. Los especialistas en esta área son los Científicos de Datos (Data Scientists).\nLa última fase del proceso es la comunicación de los resultados y hallazgos. Es importante aprender a presentar los resultados y veremos algunas herramientas básicas para lograrlo.",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#recursos-bibliógraficos",
    "href": "index.html#recursos-bibliógraficos",
    "title": "Ciencia de Datos",
    "section": "Recursos bibliógraficos",
    "text": "Recursos bibliógraficos\nHay muchos (muchísimos) recursos disponibles para apoyar este curso. Es fundamental usar lenguajes de programación y en este caso usaremos R, cualquier curso online, libro o tutorial puede servir para aprender los conceptos básicos, el estudiante es libre de escoger y aprender (si aún no sabe) R de una fuente de su preferencia.\nEl libro principal para los conceptos estadísticos será James et al. (2021), ya que maneja un buen balance entre aplicaciones y teoría para el bagaje matemático que se espera de los estudiantes. Este libro también trae código y aplicaciones en R, pero hay mejores fuentes en este aspecto.\nOtros 2 libros interesantes para la parte conceptual y teórica son (Irizarry, s. f.; Huang y Deng, s. f.), un poco menos desarrollados en lo conceptual con respecto a (James et al. 2021) pero a cambio traen más y mejor código para aplicaciones usando R.\nEl libro de (Wickham, Çetinkaya-Rundel, y Grolemund, s. f.) es excelente para aprender a hacer ciencia de datos en R, sobre todo en la parte de análisis exploratorio de datos, tiene muchos ejemplos y código muy bien escrito. Su desventaja2 es la falta de modelos estadísticos.\n2 Desventaja en el sentido de que el libro no está pensado para hacer modelación por lo que tendremos que usar otras fuentes para esta parteUn libro que requiere algo más de madurez matemática que (James et al. 2021) es (Hastie, Tibshirani, y Friedman 2009), aunque no se usará como referencia principal, es útil para profundizar en algunos temas importantes. De igual manera, se pueden consultar las notas disponibles en línea de 2 cursos de estadística no paramétrica (García-Portugués, s. f.a) y modelos predictivos (García-Portugués, s. f.b).\nLos libros (Alexander 2023; K. Healy 2018; Kabacoff, s. f.) son excelentes referencias para profundizar en aspectos de visualización de datos usando R. También se pueden encontrar toda una serie de recursos valiosos en la web, como (Emaasit, s. f.; C. Healy y Holtz, s. f.; Holtz, s. f.).\nLos libros (James et al. 2021; Hastie, Tibshirani, y Friedman 2009) pueden obtenerse de las bases de datos de la universidad. Los libros (Irizarry, s. f.; Huang y Deng, s. f.; Wickham, Çetinkaya-Rundel, y Grolemund, s. f.; García-Portugués, s. f.a, s. f.b; Alexander 2023; K. Healy 2018; Kabacoff, s. f.) están disponibles en la web y son de libre acceso.",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#saberes-previos",
    "href": "index.html#saberes-previos",
    "title": "Ciencia de Datos",
    "section": "Saberes previos",
    "text": "Saberes previos\nPara un óptimo desarrollo de los contenidos del curso, se espera que los estudiantes tengan habilidades básicas en programación algorítmica con cualquier lenguaje. Se usará R pero la experiencia en cualquier otro lenguaje es suficiente para aprender rápidamente las herramientas necesarias.\nDe igual forma es necesario el manejo de conceptos matemáticos de funciones, derivadas y optimización en una y varias variables tal como se ve en los cursos de cálculo; conceptos de variables aleatorias, estimadores, intervalos de confianza, pruebas de hipótesis y regresión lineal de los cursos de Probabilidad y Estadística y Modelos de Regresión y Series de Tiempo. Es recomendable que el estudiante se sienta cómodo en la manipulación de matrices y sistemas de ecuaciones lineales como se ve en el curso de Álbegra Lineal.",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#objetivos",
    "href": "index.html#objetivos",
    "title": "Ciencia de Datos",
    "section": "Objetivos",
    "text": "Objetivos\n\nComprender la teoría y los conceptos en los que se fundamentan los métodos estudiados\nIdentificar problemas en los que se puedan aplicar de forma adecuada modelos predictivos de ciencia de datos\nAdquirir pericia en las diferentes fases de la ciencia de datos: importación, organización, transformación, visualización, modelación y comunicación\nAplicar en problemas reales los conceptos aprendidos, mediante el uso de lenguajes de programación y bases de datos\nAnalizar y comunicar de manera clara los resultados de la aplicación de modelos estadísticos en bases de datos",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#metodología",
    "href": "index.html#metodología",
    "title": "Ciencia de Datos",
    "section": "Metodología",
    "text": "Metodología\nEl contenido del curso será presentado en sesiones presenciales los días martes a las 8:00 am y miércoles a las 4:00 pm. Durante las clases se irán desarrollando de manera simultánea conceptos y código en R, por lo que es necesario estar en salas de informática.\nEl estudiante es responsable de trabajar semanalmente en el curso para afianzar los temas dados. se realizarán exámenes cortos3 periódicamente para evaluar la evolución de cada estudiante en la asimilación de los temas. Se dejarán talleres/tareas para estimular la investigación y profundización de los temas vistos durante las clases.\n3 No es necesario que estas evaluaciones rápidas o quices sean programadas o avisadas con anticipación, pueden realizarse en cualquier clase y en cualquier momento de la clase. Si \\(p_k\\) es la probabilidad de haya quiz en la k-ésima clase, entonces \\(p_k&gt;0 \\ \\forall k\\)",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#plan-de-trabajo-por-semana",
    "href": "index.html#plan-de-trabajo-por-semana",
    "title": "Ciencia de Datos",
    "section": "Plan de trabajo por semana",
    "text": "Plan de trabajo por semana\n\n\n\n\n\nSemana\nInicio\nTemas\n\n\n\n\n1\njulio 17\nIntroducción al curso. Fundamentos de R para el análisis de datos\n\n\n2\njulio 24\nAnálisis exploratorio, parte I\n\n\n3\njulio 31\nAnálisis exploratorio, parte II\n\n\n4\nagosto 07\nFunción de pérdida. Medidas de la calidad de un modelo. Sesgo y varianza\n\n\n5\nagosto 14\nRegresión lineal. Parte I. Examen 1\n\n\n6\nagosto 21\nRegresión lineal. Parte II\n\n\n7\nagosto 28\nModelos lineales de clasificación. Análisis discriminante lineal\n\n\n8\nseptiembre 04\nRegresión logística\n\n\n9\nseptiembre 11\nValidación cruzada (CV)\n\n\n10\nseptiembre 18\nMétodos de regularización. Ridge y Lasso. Examen 2\n\n\n11\nseptiembre 25\nReducción de la dimensión. Componentes principales\n\n\n12\noctubre 02\nModelos no lineales de regresión. Regresión polinómica y en bases funcionales\n\n\n13\noctubre 09\nSplines, Smoothing splines\n\n\n14\noctubre 16\nMétodos basados en árboles. Parte I Examen 3\n\n\n15\noctubre 23\nMétodos basados en árboles. Parte II\n\n\n16\noctubre 30\nBreve introducción a temas adicionales: Máquinas de Soporte Vectorial, Redes Neuronales",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#evaluación",
    "href": "index.html#evaluación",
    "title": "Ciencia de Datos",
    "section": "Evaluación",
    "text": "Evaluación\nLa nota final se calculará como el promedio de 4 cortes de igual ponderación (25%). Cada corte tendrá los siguientes componentes:\n\n\n\n\n\n\n\n\n\n\nCortes\nComponentes\n\n\n\n\nPrimer corte (25%)\nEvaluaciones de Seguimiento, quices, talleres, exposiciones, trabajos (12%)\nAsistencia (puntualidad), Participación en clase (2%)\nEvaluación parcial (11%)\n\n\nSegundo corte (25%)\nEvaluaciones de Seguimiento, quices, talleres, exposiciones, trabajos (12%)\nAsistencia (puntualidad), Participación en clase (2%)\nEvaluación parcial (11%)\n\n\nTercer corte (25%)\nEvaluaciones de Seguimiento, quices, talleres, exposiciones, trabajos (12%)\nAsistencia (puntualidad), Participación en clase (2%)\nEvaluación parcial (11%)\n\n\nCuarto corte (25%)\nEvaluaciones de Seguimiento, quices, talleres, exposiciones, trabajos (10%)\nEvaluación o proyecto final (15%)",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#sobre-el-reglamento",
    "href": "index.html#sobre-el-reglamento",
    "title": "Ciencia de Datos",
    "section": "Sobre el Reglamento",
    "text": "Sobre el Reglamento\n\nEs necesario que el estudiante participe como mínimo en el 80% del desarrollo del curso (clases). La inasistencia será causal de pérdida del curso con una calificación de cero punto cero cero (0.00), sin posibilidad de cancelación del curso, si la inasistencia fue reportada previamente al sistema de información.\nLa inasistencia por razones de enfermedad o fuerza mayor deberá justificarse dentro de los tres (3) días hábiles siguientes al hecho. Cuando el estudiante requiera ausentarse para eventos académicos, científicos, culturales y deportivos, en representación de la Universidad, deberá reportar este hecho al profesor, como mínimo con ocho (8) días hábiles de anticipación.\nEn cualquiera de las clases se pueden hacer actividades evaluativas de seguimiento (quices, talleres cortos, ejercicios en clase), con o sin programación previa.\nLa no presentación de una evaluación en la fecha y hora fijada por el profesor conlleva una nota de 0.00 (cero punto cero cero).\nCuando, por causas justificadas, no se puedan presentar las evaluaciones parciales o finales en las fechas establecidas por el docente, se podrán solicitar pruebas supletorias ante el director de la Facultad. Estas pruebas tendrán un costo y deberán ser solicitadas dentro de los tres (3) días hábiles siguientes a la programación de la prueba no presentada por el estudiante y, si es autorizada, deberá ser presentada dentro de los 10 días hábiles siguientes a su autorización.\nLos resultados de las evaluaciones deberán ser informados al estudiante, a más tardar, dentro de las dos (2) semanas siguientes a su presentación.\n\n\n\n\n\nAlexander, Rohan. 2023. Telling Stories with Data. CRC Press. https://tellingstorieswithdata.com/.\n\n\nEmaasit, Daniel. s. f. «ggplot2 Extensions». https://exts.ggplot2.tidyverse.org/gallery/.\n\n\nGarcía-Portugués, Eduardo. s. f.a. Notes for Nonparametric Statistics. https://bookdown.org/egarpor/NP-UC3M/.\n\n\n———. s. f.b. Notes for Predictive Modeling. https://bookdown.org/egarpor/PM-UC3M/.\n\n\nHastie, Trevor, Robert Tibshirani, y Jerome Friedman. 2009. The Elements of Statistical Learning. Springer Series en Statistics. New York, NY: Springer. https://doi.org/10.1007/978-0-387-84858-7.\n\n\nHealy, Conor, y Yan Holtz. s. f. «From data to Viz  Find the graphic you need». https://www.data-to-viz.com/data-to-viz.com.\n\n\nHealy, Kieran. 2018. Data Visualization. A Practical Introduction. Princeton University Press. https://socviz.co/index.html#preface.\n\n\nHoltz, Yan. s. f. «The R Graph Gallery – Help and inspiration for R charts». The R Graph Gallery. https://r-graph-gallery.com/index.html.\n\n\nHuang, Shuai, y Houtao Deng. s. f. Data Analytics: A Small Data Approach. CRC Press. https://dataanalyticsbook.info/index.html#cover.\n\n\nIrizarry, Rafael A. s. f. Introduction to Data Science. CRC Press. http://rafalab.dfci.harvard.edu/dsbook/.\n\n\nJames, Gareth, Daniela Witten, Trevor Hastie, y Robert Tibshirani. 2021. An Introduction to Statistical Learning: with Applications in R. 2.ª ed. Springer Texts en Statistics. New York, NY: Springer US. https://doi.org/10.1007/978-1-0716-1418-1.\n\n\nKabacoff, Rob. s. f. Data Visualization with R. https://rkabacoff.github.io/datavis/.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, y Garrett Grolemund. s. f. R for Data Science (2e). 2.ª ed. O’REILLY. https://r4ds.hadley.nz/.",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "r-intro.html",
    "href": "r-intro.html",
    "title": "1  Introducción al uso de R",
    "section": "",
    "text": "1.1 Instalación\nPara trabajar con R, es necesario instalar el lenguaje en sí y un IDE (por sus siglas en inglés, Integrated Development Environment). Un IDE es una herramienta que facilita el trabajo con el lenguaje de programación, hay varias opciones para R, usaremos Rstudio.\nSiga los siguientes pasos para la instalación:\nSe recomienda instalarlo en el orden dado para que Rstudio reconozca automáticamente la versión de R ya instalada. Cuando esté todo listo, se ejecuta la aplicación de Rstudio, desde donde haremos todo el trabajo.\nEn Rstudio: file -&gt; New File -&gt; R script (atajo: ctrl+shift+N), abrirá un editor en blanco para empezar a codificar. Al hacerlo, debe verse como en la imagen\nGuarde su trabajo desde el menú: File -&gt; Save As; o con: ctrl+S.",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#instalación",
    "href": "r-intro.html#instalación",
    "title": "1  Introducción al uso de R",
    "section": "",
    "text": "Descargar e instalar R según el sistema operativo que se tenga.\nDescargar e instalar la versión de Rstudio Desktop\n\n\n\n\n\n\n\n\n\nFigura 1.1: Rstudio IDE",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#lo-básico",
    "href": "r-intro.html#lo-básico",
    "title": "1  Introducción al uso de R",
    "section": "1.2 Lo básico",
    "text": "1.2 Lo básico\n\nR es un lenguaje de tipado dinámico y de alto nivel (o sea, fácil de aprender)\nEl operador de asignación es &lt;-. Atajo de teclado: Alt + -. Asignación es el proceso mediante el cual guardamos los objetos que creamos en espacios de memoria o variables\nEs posible usar también el signo igual (=) como operador de asignación, aunque en algunos pocos casos particulares puede generar confusiones, por lo que es recomendable usar &lt;-\nPara agregar comentarios al código use el signo #. Todo lo que escriba en R, después de un signo #, será ignorado. Sirve para comentar el código\nPuede ejecutar una línea o un subconjunto de líneas seleccionadas del código con ctrl + enter. Sitúe el cursor en cualquier parte de la línea a ejecutar o seleccione las líneas deseadas. Dependiendo de las líneas ejecutadas, puede encontrar un resultado impreso en la consola, una gráfica, unas variables agregadas al entorno, etc.\nLos nombres de las variables deben empezar con una letra1 y luego cualquier carácter alfanumérico. Los únicos caracteres especiales permitidos son el punto (.) y el guión bajo (_), útiles cuando se quiere usar nombres compuestos\nLos nombres de variables no deben contener espacios\n\n1 También pueden empezar con un . pero esto crea objetos ocultosEjemplos de asignación de valores a variables:\n\na1 &lt;- 56 # numeric\nb = 12.3 # numeric\nb = b + 1\na &lt;- \"hola\" # character\nx_1 &lt;- 3L # integer\nx2 &lt;- FALSE # logical\nx.3 &lt;- 1 + 3i # complex\nvel_inicial &lt;- 47.31 # Velocidad inicial en km/h\n\nAlgunos consejos:\n\nUsar nombres relacionados con lo que se está codificando para ayudar a entender mejor el código. Por ejemplo, si se está resolviendo un problema en física, donde se necesita almacenar el valor de la velocidad inicial de una partícula, es mejor opción velocidad_incial &lt;- 100, en lugar de var1 &lt;- 100\nNo usar mayúsculas (cuestión de gustos)\nNo usar acentos (tildes)\nComentar comentar comentar, para que cualquiera que lea su código, pueda entenderlo con más facilidad\n\n\nvelocidad &lt;- 80 # velocidad en km/h\nvel_inicial &lt;- 45 # velocidad inicial en km/h",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#tipos-de-datos-en-r",
    "href": "r-intro.html#tipos-de-datos-en-r",
    "title": "1  Introducción al uso de R",
    "section": "1.3 Tipos de datos en R",
    "text": "1.3 Tipos de datos en R\n\nCharacter\nNumeric\nInteger\nComplex\nLogical\n\n\nx1 &lt;- 'UPB Montería' # las cadenas de texto deben ir entre comillas simples (') o dobles (\")\nclass(x1)  # devuelve la clase del objeto x1\n## [1] \"character\"\n\npi # pi es una constante pi = 3.1415...\n## [1] 3.141593\n\nx2 &lt;- pi    \nclass(x2)\n## [1] \"numeric\"\nx3 &lt;- \"AB\" # character\nx4 &lt;- 6L # integer\nclass(x4)\n## [1] \"integer\"\nx5 &lt;- 3.4 + 9.3i # complex\nclass(x5)\n## [1] \"complex\"\nlogico &lt;- FALSE # logical\nclass(logico)\n## [1] \"logical\"",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#vectores",
    "href": "r-intro.html#vectores",
    "title": "1  Introducción al uso de R",
    "section": "1.4 Vectores",
    "text": "1.4 Vectores\nUn vector es un arreglo unidimensional que puede almacenar datos de un mismo tipo. Podemos tener un vector numérico, por ejemplo, lo que quiere decir que tenemos un arreglo que almacena solo datos de tipo numérico. No se pueden almacenar datos de diferente tipo en un vector, es decir, no puede tener en R un vector con valores numéricos y lógicos mezclados.\nPara crear un vector, se usa la función c() (es una “c” minúscula, R distingue entre mayúsculas y minúsculas). Ejemplos:\n\nvector1 &lt;- c(1,5,7,4) # Vector de solo valores numéricos\nvlog &lt;- c(T, F, F, F, T) # vector de solo valores lógicos\nvchar &lt;- c(\"c\", \"i\", \"e\", \"n\", \"c\", \"i\", \"a\") # vector de caracteres\nvector1; vlog; vchar # imprime los vectores creados\n## [1] 1 5 7 4\n## [1]  TRUE FALSE FALSE FALSE  TRUE\n## [1] \"c\" \"i\" \"e\" \"n\" \"c\" \"i\" \"a\"\n\nSi intentamos almacenar elementos de diferente tipo en un vector, R intentará hacer una coerción a un tipo de dato adecuado.\n\nc(1,2,3,\"hola\") # creará un vector de caracteres\n## [1] \"1\"    \"2\"    \"3\"    \"hola\"\nc(1,2,3,FALSE,TRUE) # creará un vector numérico. T equivale a 1 y F a 0\n## [1] 1 2 3 0 1\n\nHay muchas formas adicionales a la función c() para obtener o crear vectores en R. Algunas formas comunes son:\n\n# una suceción de números enteros desde el 10 hasta el 20 \n# almacenando el resultado en un vector llamado suc1\nsuc1 &lt;- 10:20 \n\n# con la función vector()\nvec1 &lt;- vector(mode = \"numeric\", length = 15)\nvec2 &lt;- vector(\"logical\", 6)\nvec3 &lt;- vector(length=6, mode=\"logical\")\nsuc1; vec1; vec2; vec3\n##  [1] 10 11 12 13 14 15 16 17 18 19 20\n##  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n## [1] FALSE FALSE FALSE FALSE FALSE FALSE\n## [1] FALSE FALSE FALSE FALSE FALSE FALSE\n\nLas funciones como vector pueden usarse sin declarar de forma explícita los argumentos, solo asegúrese de poner los valores en el orden correcto.\nMás ejemplos:\n\n23:15\n## [1] 23 22 21 20 19 18 17 16 15\n# con la función seq() para crear vectores a partir de secuencias\nseq(from = 5, to = 10) # secuencia que empieza en 5 y va hasta el 10 de uno en uno\n## [1]  5  6  7  8  9 10\n\n# una suceción que empieza en 5 y aumenta en pasos de 0.2 hasta llegar a 10\nseq(from = 5, to = 10, by = 0.2)\n##  [1]  5.0  5.2  5.4  5.6  5.8  6.0  6.2  6.4  6.6  6.8  7.0  7.2  7.4  7.6  7.8\n## [16]  8.0  8.2  8.4  8.6  8.8  9.0  9.2  9.4  9.6  9.8 10.0\n\n# desde el 5 hasta el 10, en pasos iguales que permitan un total de 12 números\nseq(from = 5, to = 10, length.out = 12)\n##  [1]  5.000000  5.454545  5.909091  6.363636  6.818182  7.272727  7.727273\n##  [8]  8.181818  8.636364  9.090909  9.545455 10.000000\n\n# con la función rep() para repetir un objeto, n cantidad de veces\nrep(1.45, 6) # repite el número 1.45 6 veces y genera un vector\n## [1] 1.45 1.45 1.45 1.45 1.45 1.45\nrep(c(1,3), 7) # repite el vector c(1,3) 7 veces\n##  [1] 1 3 1 3 1 3 1 3 1 3 1 3 1 3\n\nMuchas funciones y procedimientos en R, devuelven sus resultados en vectores. Por ejemplo, es posible generar números aleatorios de forma muy sencilla y guardarlos en un vector\n\nx &lt;- runif(n=100) # runif() genera números uniformemente distribuidos (entre 0 y 1 por defecto)\n\n# 20 números uniformes entre -3.7 y -1\ny &lt;- runif(n=100, min=-3.7, max=-1) # por supuesto: min &lt; max\n\n# números con distribución normal\nz &lt;- rnorm(n = 100, mean = 2.1, sd = 0.4)\n\nplot(x, y) # gráfico de dispersión\n\n\n\n\n\n\n\nhist(z) # histograma\n\n\n\n\n\n\n\n\nPara acceder a los elementos de un vector se usan los corchetes []\n\nx &lt;- rnorm(n=20, mean = 0, sd = 2) # vector con 20 números\nx # imprime el vector\n##  [1]  0.31111021 -1.28932691 -0.63783126  2.73281460 -3.24308477  0.61290631\n##  [7] -4.60754847 -2.89751587  0.83773948 -0.01509477 -0.73674283 -1.23449014\n## [13] -2.65829987 -0.70493001 -1.39230755 -0.09070774  1.38974548  0.27562085\n## [19] -0.32799147 -1.36002823\nx[17] # elemento 17\n## [1] 1.389745\nx[3:10]  # elementos del 3 al 10 inclusive \n## [1] -0.63783126  2.73281460 -3.24308477  0.61290631 -4.60754847 -2.89751587\n## [7]  0.83773948 -0.01509477\nx[-5]  # todos los elementos menos el quinto\n##  [1]  0.31111021 -1.28932691 -0.63783126  2.73281460  0.61290631 -4.60754847\n##  [7] -2.89751587  0.83773948 -0.01509477 -0.73674283 -1.23449014 -2.65829987\n## [13] -0.70493001 -1.39230755 -0.09070774  1.38974548  0.27562085 -0.32799147\n## [19] -1.36002823\nx[c(1,6,4)]  # elementos 1, 6 y 4\n## [1] 0.3111102 0.6129063 2.7328146\nx[-c(1,6,4)]  # todos los elementos excepto el 1, 6 y 4\n##  [1] -1.28932691 -0.63783126 -3.24308477 -4.60754847 -2.89751587  0.83773948\n##  [7] -0.01509477 -0.73674283 -1.23449014 -2.65829987 -0.70493001 -1.39230755\n## [13] -0.09070774  1.38974548  0.27562085 -0.32799147 -1.36002823",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#matrices",
    "href": "r-intro.html#matrices",
    "title": "1  Introducción al uso de R",
    "section": "1.5 Matrices",
    "text": "1.5 Matrices\nUna matriz es un arreglo bidimensional para almacenar datos de un mismo tipo (igual que un vector, pero ahora en filas y columnas). Hay varias formas de crear matrices. Se puede usar la función matrix()\n\n# matriz de 3 filas y columnas, si no se asignan valores\n# se llenará cada posición con NA\nmm &lt;- matrix(nrow = 3, ncol = 4)\n\n## Matriz de 3 filas y 4 columnas, cuyos valores están en un vector\n## de números aleatorios uniformemente distribuidos\nmm1 &lt;- matrix(data=runif(12,0,1), nrow = 3, ncol = 4)\nmm1\n##           [,1]      [,2]        [,3]      [,4]\n## [1,] 0.8957262 0.8582433 0.301976190 0.9588218\n## [2,] 0.7463191 0.2704070 0.004278304 0.7268614\n## [3,] 0.9618773 0.3274588 0.399206386 0.1620095\n\n# Por defecto se llenará la matriz por columnas\nmm2 &lt;- matrix(data = c(1,2,3,4,5,6,7,8,9), nrow = 3)\nmm2\n##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9\n# note que no especificamos el número de columnas, pero R es \"inteligente\"\n# y sabe que necesita 4 columnas para crear una matriz de 3 filas con 12 elementos\n\n# Si desea \"armar\" la matriz por filas, agregue byrow = TRUE\nmm3 &lt;- matrix(data = c(1,2,3,4,5,6,7,8,9), nrow = 3, byrow = TRUE)\nmm3\n##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6\n## [3,]    7    8    9\n\n# Para acceder a los elementos, indique el número de la fila y/o columna\nmm3[3,2]  #elemento (3,2): fila 3, columna 2\n## [1] 8\nmm3[2,]  # toda la fila 2 (un vector)\n## [1] 4 5 6\nmm3[,3]  # toda la columna 3 (un vector)\n## [1] 3 6 9\n\nSe pueden combinar vectores por filas o por columnas para formar matrices\n\nsuc1 &lt;- 1:9\nsuc2 &lt;- 2:10\nmm4 &lt;- cbind(suc1, suc2) # se combina por columnas\nmm5 &lt;- rbind(suc1, suc2) # se combina por filas\nmm4; mm5 # Imprime las matrices en la consola\n##       suc1 suc2\n##  [1,]    1    2\n##  [2,]    2    3\n##  [3,]    3    4\n##  [4,]    4    5\n##  [5,]    5    6\n##  [6,]    6    7\n##  [7,]    7    8\n##  [8,]    8    9\n##  [9,]    9   10\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n## suc1    1    2    3    4    5    6    7    8    9\n## suc2    2    3    4    5    6    7    8    9   10",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#data-frame",
    "href": "r-intro.html#data-frame",
    "title": "1  Introducción al uso de R",
    "section": "1.6 Data frame",
    "text": "1.6 Data frame",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#listas",
    "href": "r-intro.html#listas",
    "title": "1  Introducción al uso de R",
    "section": "1.7 Listas",
    "text": "1.7 Listas\nLos vectores y matrices están formados por un único tipo de datos, las listas no tienen esta limitación y se pueden crear con la función list(). Los elementos de una lista pueden ser: numéricos, enteros, lógicos, texto; pueden contener otras estructuras como vectores, matrices, y otras listas.\n\n# una lista que contiene un número entero, un caracter, un número real\n# un vector, una matriz, y otra lista. \nlista1 &lt;- list(3L, \"DF\", pi, c(1.34,2,3), mm1, list(2,\"ss\"))\nlista1\n## [[1]]\n## [1] 3\n## \n## [[2]]\n## [1] \"DF\"\n## \n## [[3]]\n## [1] 3.141593\n## \n## [[4]]\n## [1] 1.34 2.00 3.00\n## \n## [[5]]\n##           [,1]      [,2]        [,3]      [,4]\n## [1,] 0.8957262 0.8582433 0.301976190 0.9588218\n## [2,] 0.7463191 0.2704070 0.004278304 0.7268614\n## [3,] 0.9618773 0.3274588 0.399206386 0.1620095\n## \n## [[6]]\n## [[6]][[1]]\n## [1] 2\n## \n## [[6]][[2]]\n## [1] \"ss\"\n\nPara acceder a sus elementos se usan dobles corchetes [[]]\n\nlista1[[2]] # segundo elemento de la lista\n## [1] \"DF\"\n\n# Primer elemento del vector que está el el lugar 4 de la lista (¡reloco!)\nlista1[[4]][1]  \n## [1] 1.34\n\nR es un lenguaje muy versátil y trae por defecto muchas opciones de cálculo. Además de eso, es posible ampliar la gama de operaciones o actividades que se pueden realizar con la instalación de paquetes o librerías adicionales. Es un lenguaje bastante popular y con una comunidad muy activa. Si tiene algún problema con algún código, muy seguramente otra persona ya tuvo el mismo problema antes y se puede encontrar la solución en línea. Cuando tenga un resultado inesperado puede, copiar y pegar el error en Google para buscar soluciones.",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#valores-faltantes",
    "href": "r-intro.html#valores-faltantes",
    "title": "1  Introducción al uso de R",
    "section": "1.8 Valores faltantes",
    "text": "1.8 Valores faltantes\nUn vector de valores lógicos puede usarse para extraer elementos de otro vector. Se extraerá cada elemento en el que haya un valor TRUE\n\nxx &lt;- 20:26 # vector con 7 elementos\nind &lt;- c(T, T, F, F, T, T, T)\nxx[ind]  # extrae las posiciones donde hay TRUE: 1,2,5,6,7\n## [1] 20 21 24 25 26\n\nTipos de datos especiales:\n\nNA: Not Available\nNaN: Not a Number\n\n\n2/0\n## [1] Inf\n0/0\n## [1] NaN\n\nCon alguna combinación de funciones podemos sacar datos NA y/o NaN de un vector\n\nzz &lt;- c(1,2,NA,Inf,NA, NaN, NA, 4, NA)\n\n# devuelve un vector con elementos TRUE donde hay valores NA o NaN\nss &lt;- is.na(zz) \n\n# Vector con elementos TRUE donde hay valores NaN\nss1 &lt;- is.nan(zz) \n\n# con el operador ! cambiamos TRUE por FALSE y viceversa\nssneg &lt;- !ss # en ssneg hay TRUE donde no hay valores NA o NaN\n\n# extrae valores donde ssneg es TRUE, es decir donde no hay valores\n# NA o NaN en zz (¡qué enredo tan bueno!)\nzzlimpio &lt;- zz[ssneg] \nzz; zzlimpio # imprimir y comparar\n## [1]   1   2  NA Inf  NA NaN  NA   4  NA\n## [1]   1   2 Inf   4",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#paquetes-o-librerías",
    "href": "r-intro.html#paquetes-o-librerías",
    "title": "1  Introducción al uso de R",
    "section": "1.9 Paquetes o librerías",
    "text": "1.9 Paquetes o librerías\nHay paquetes para hacer casi cualquier cosa en R. Aquí puede econttrar una lista de los paquetes disponibles para instalación directa desde la consola de R (hay más de 20.000).\nPara instalar y luego cargar paquetes:\n\ninstall.packages(\"nombre_paquete\"): solo se hace una vez, por lo que no es necesario incluirlo en el editor (la parte donde se escribe el código) sino que se puede realizar una única vez en la consola (la parte inferior izquierda de Rstudio donde se imprimen los resultados)\nlibrary(nombre_paquete): debe hacerse siempre que se inicie una nueva sesión y se vaya a usar el paquete, normalmente se cargan las librerías a usar al comienzo del código",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#más-vectores",
    "href": "r-intro.html#más-vectores",
    "title": "1  Introducción al uso de R",
    "section": "1.10 Más vectores",
    "text": "1.10 Más vectores\n\nx1 &lt;- rep(0,20)\nx2 &lt;- seq(from=0, to=2, length.out=5)\nx3 &lt;- seq(from=0, to=2, by=0.2)\nx4 &lt;- 3:12\n\n# La función sample() es bastante útil\n# Extrae una muestra tamaño 3, del vector x4\nx5 &lt;- sample(x4, size = 3, replace = F) # sin reemplazo\nx6 &lt;- sample(x4, size = 15, replace = T) # con reemplazo\nx1; x2; x3; x4; x5; x6\n##  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n## [1] 0.0 0.5 1.0 1.5 2.0\n##  [1] 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0\n##  [1]  3  4  5  6  7  8  9 10 11 12\n## [1]  7 10 12\n##  [1]  9 11  8  4 12  6  6 12  4 11  5  3 11  6 12\n\nCuando se trabaja con números aleatorios es posible establecer una semilla, para poder reproducir los mismos resultados en diferentes computadores\n\n# se establece la semilla, esto permite que los números \n# generados sean iguales en otros computadores, \n# siempre que tengan la misma semilla establecida\nset.seed(234) \nx7 &lt;- rnorm(1000, mean = 0, sd=1)\nhist(x7)\n\n\n\n\n\n\n\nx8 &lt;- c(\"c\", \"i\", \"e\", \"n\", \"c\", \"i\", \"a\")\nx9 &lt;- sample(x8, size = 15, replace = T)\nx9\n##  [1] \"c\" \"i\" \"e\" \"i\" \"c\" \"c\" \"e\" \"e\" \"c\" \"n\" \"i\" \"i\" \"e\" \"i\" \"c\"",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#algunas-funciones-básicas-para-usar-con-vectores",
    "href": "r-intro.html#algunas-funciones-básicas-para-usar-con-vectores",
    "title": "1  Introducción al uso de R",
    "section": "1.11 Algunas funciones básicas para usar con vectores",
    "text": "1.11 Algunas funciones básicas para usar con vectores\n\n\nmin_x7 &lt;- min(x7) # devuelve el valor mínimo en el vector\nmax_x7 &lt;- max(x7) # devuelve el valor máximo en el vector\n\n# devuelve la posición del vector donde se encuentra el valor mínimo\ndonde_min &lt;- which.min(x7) \n# devuelve la posición del vector donde se encuentra el valor máximo\ndonde_max &lt;- which.max(x7)\n\nmin_x7; donde_min\n## [1] -3.03609\n## [1] 8\nmax_x7; donde_max\n## [1] 3.096502\n## [1] 528\n\nPara borrar objetos de la memoria:\n\nrm(ind, logico, max_x7) # borra los objetos ind y max_x7\nrm(list = ls()) # borra todo",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#funciones",
    "href": "r-intro.html#funciones",
    "title": "1  Introducción al uso de R",
    "section": "1.12 Funciones",
    "text": "1.12 Funciones\nR está optimizado para trabajar con funciones. Una función es un conjunto de líneas de código que se guardan en memoria y que se puede llamar siempre que sea necesario en otras partes del código, sin necesidad de volver a escribir todo lo que hace dicha función\nLa sintaxis básica para crear una función en R es\nnombre_funcion &lt;- function(&lt;argumentos&gt;){\n  Hacer algo con los argumentos\n  devuelva algún resultado\n}\nPor ejemplo\n\nfuncion_1 &lt;- function(x) x^4 + 6*x + 3\nfuncion_1(3)\n## [1] 102\nplot(funcion_1, 0, 10) #grafica la función en el intervalo especificado\n\n\n\n\n\n\n\n\nSi las operaciones que hace la función se declaran en una sola línea, no es necesario usar las llaves {}. Si las declaraciones dentro de la función ocupan varias líneas, entonces sí es necesario usar las llaves2\n2 Casi siempre es necesario, las funciones no suelen ser tan simples para declararse en una sola línea de códigoFunciones de 2 variables\n\nfuncion_2 &lt;- function(x,y){\n  return(x*y + 2*x + log(abs(x+y+1)))\n}\nfuncion_2(2,3)\n## [1] 11.79176\n\nEl concepto de función en R no está limitado a funciones matemáticas tal como estamos acostumbrados, los argumentos de las funciones pueden ser: números, vectores, matrices, listas, otras funciones\n\n## f  una función\n## x es un vector\n## y es una matriz\n\nfuncion_3 &lt;- function(f,x,y){\n  return(f(x) + x*y[,1]) # el resultado debe ser un vector (¿por qué?)\n}\n\nxxxx &lt;- 1:5\nyyyy &lt;- matrix(data = 1:30, nrow = 5, byrow = TRUE)\nfuncion_3(f = funcion_1, x = xxxx, y = yyyy)\n## [1]  11  45 141 359 783",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#sec-rgl",
    "href": "r-intro.html#sec-rgl",
    "title": "1  Introducción al uso de R",
    "section": "1.13 Ejemplo de la instalación y uso de un paquete",
    "text": "1.13 Ejemplo de la instalación y uso de un paquete\nEn R hay muchos paquetes que nos ayudan a hacer gráficas en 3D. Instalemos y usemos el paquete rgl. Note que cada paquete trae nuevas funciones que debemos aprender si es que queremos usarlo, lo bueno es que podemos encontrar documentación en muchos sitios de internet. Aquí encontramos un buen tutorial para usar rgl\nGráfica 3D dinámica con el paquete ‘rgl’\n\nlibrary(rgl) # ya debe estar instalado: install.package(\"rgl\")\nx &lt;- seq(-5.12, 5.12, length.out=200)\ny &lt;- x\n\n# Función rastrigin muy usada en optimización\nrast &lt;- function(x,y){\n  20 + x^2 -10*cos(2*pi*x) + y^2 - 10*cos(2*pi*y)\n}\nrast(0,0) # evalúa la función en el punto (0,0)\n## [1] 0\n\nz &lt;- outer(x,y,FUN=rast)\nrgl::persp3d(x,y,z, col=\"orange2\", main=\"Rastrigin\")",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#importar-datos",
    "href": "r-intro.html#importar-datos",
    "title": "1  Introducción al uso de R",
    "section": "1.14 Importar datos",
    "text": "1.14 Importar datos\nPara obtener y cambiar el directorio de trabajo\ngetwd()\nsetwd(\"colocar la ruta de windows, cambiar \\ por /\")\n\n# El archivo Auto.txt debe estar en el directorio de trabajo\nautos &lt;- read.table(file = \"Auto.txt\")\nsummary(autos) # hace un resumen de cada variable en la base de datos autos\n##       mpg          cylinders      displacement     horsepower        weight    \n##  Min.   : 9.00   Min.   :3.000   Min.   : 68.0   Min.   : 46.0   Min.   :1613  \n##  1st Qu.:17.00   1st Qu.:4.000   1st Qu.:105.0   1st Qu.: 75.0   1st Qu.:2225  \n##  Median :22.75   Median :4.000   Median :151.0   Median : 93.5   Median :2804  \n##  Mean   :23.45   Mean   :5.472   Mean   :194.4   Mean   :104.5   Mean   :2978  \n##  3rd Qu.:29.00   3rd Qu.:8.000   3rd Qu.:275.8   3rd Qu.:126.0   3rd Qu.:3615  \n##  Max.   :46.60   Max.   :8.000   Max.   :455.0   Max.   :230.0   Max.   :5140  \n##   acceleration        year           origin          name          \n##  Min.   : 8.00   Min.   :70.00   Min.   :1.000   Length:392        \n##  1st Qu.:13.78   1st Qu.:73.00   1st Qu.:1.000   Class :character  \n##  Median :15.50   Median :76.00   Median :1.000   Mode  :character  \n##  Mean   :15.54   Mean   :75.98   Mean   :1.577                     \n##  3rd Qu.:17.02   3rd Qu.:79.00   3rd Qu.:2.000                     \n##  Max.   :24.80   Max.   :82.00   Max.   :3.000\nmpg_auto &lt;- autos$mpg  #guarda la variable mpg en el objeto mpg_auto\nclass(autos)\n## [1] \"data.frame\"",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  },
  {
    "objectID": "r-intro.html#estructuras-de-control",
    "href": "r-intro.html#estructuras-de-control",
    "title": "1  Introducción al uso de R",
    "section": "1.15 Estructuras de control",
    "text": "1.15 Estructuras de control\nif, for, while, repeat; break, next, return\n\n1.15.1 Condicionales\n\n## if(&lt;condicion&gt;){\n##  haga algo\n## } else if(&lt;condicion2&gt;){\n##  haga esto otro\n## } else{\n##  haga esto último\n## }\nx &lt;- 10\nif(x&lt;5){\n  \"X es menor que 5\"\n} else if(x==5){\n  \"X es igual a 5\"\n} else{\n  \"X es mayor que 5\"\n}\n## [1] \"X es mayor que 5\"\n\n\n\n1.15.2 Ciclos\n\n## for(i in &lt;conjunto&gt;){\n##  haga algo por cada elemento\n## }\n\nj &lt;- 1\nfor(i in 1:10){\n  if(i&lt;6){\n    j &lt;- 2*j+i\n    print(log(j))\n  } else{\n    j &lt;- 2*j+i\n    print(cos(j))\n  }\n}\n## [1] 1.098612\n## [1] 2.079442\n## [1] 2.944439\n## [1] 3.73767\n## [1] 4.488636\n## [1] -0.2151347\n## [1] -0.4080545\n## [1] -0.640098\n## [1] -0.240842\n## [1] 0.9960638\n\n\nvv &lt;- c(\"primer\", \"programa\", \"en R\", \"Con ciclo for\")\nfor (i in vv){\n  print(i)\n}\n## [1] \"primer\"\n## [1] \"programa\"\n## [1] \"en R\"\n## [1] \"Con ciclo for\"\n\nSe pueden anidar\n\nmm &lt;- matrix(data = seq(from=exp(1), to=pi, length.out=16), nrow = 4)\n\nfor(i in 1:dim(mm)[1]){\n  for(j in 1:dim(mm)[2]){\n    cat(\"El elmento (\", i, \",\", j, \") es: \", mm[i,j], \"\\n\", sep = \"\")\n  }\n}\n## El elmento (1,1) es: 2.718282\n## El elmento (1,2) es: 2.831165\n## El elmento (1,3) es: 2.944048\n## El elmento (1,4) es: 3.05693\n## El elmento (2,1) es: 2.746503\n## El elmento (2,2) es: 2.859385\n## El elmento (2,3) es: 2.972268\n## El elmento (2,4) es: 3.085151\n## El elmento (3,1) es: 2.774723\n## El elmento (3,2) es: 2.887606\n## El elmento (3,3) es: 3.000489\n## El elmento (3,4) es: 3.113372\n## El elmento (4,1) es: 2.802944\n## El elmento (4,2) es: 2.915827\n## El elmento (4,3) es: 3.02871\n## El elmento (4,4) es: 3.141593",
    "crumbs": [
      "Análisis Exploratorio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al uso de `R`</span>"
    ]
  }
]